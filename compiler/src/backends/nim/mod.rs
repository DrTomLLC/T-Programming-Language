// File: compiler/src/backends/nim/mod.rs
//! Nim codegen backend for T-Lang.
//! Reads our IR debug-text and emits a standalone Nim script
//! that replays the instructions on two stacks and prints values.

use plugin_api::{register_backend, Backend, CompiledModule, BackendError};
use once_cell::sync::Lazy;
use std::{any::Any, str};

#[derive(Debug)]
pub struct NimBackend;

impl Backend<CompiledModule> for NimBackend {
    type ModuleIr = Box<dyn Any + Send + Sync>;

    fn compile(&self, module: CompiledModule) -> Result<Self::ModuleIr, BackendError> {
        // 1. Decode IR text
        let ir = str::from_utf8(&module.bytecode)
            .map_err(|e| BackendError::Generic(format!("Invalid UTF-8 IR: {}", e)))?;

        // 2. Begin Nim script
        let mut code = String::new();
        code.push_str("# Generated by T-Lang Nim backend\n");
        code.push_str("var intStack: seq[int] = @[]\n");
        code.push_str("var strStack: seq[string] = @[]\n\n");
        code.push_str("proc main() =\n");

        // 3. Translate each IR instruction
        for line in ir.lines() {
            let instr = line.trim();
            if instr.is_empty() || instr == "Nop" {
                continue
            }
            if let Some(n) = instr.strip_prefix("PushInt(").and_then(|s| s.strip_suffix(")")) {
                code.push_str(&format!("  intStack.add({})\n", n));
            } else if let Some(raw) = instr
                .strip_prefix("PushStr(\"")
                .and_then(|s| s.strip_suffix("\")"))
            {
                let esc = raw.replace('\\', "\\\\").replace('"', "\\\"");
                code.push_str(&format!("  strStack.add(\"{}\")\n", esc));
            } else if instr == "CallPrint" {
                code.push_str(
                    "  if strStack.len > 0:\n\
           \n    stdout.write(strStack.pop())\n\
           \n  elif intStack.len > 0:\n\
           \n    stdout.write($intStack.pop())\n",
                );
            } else {
                return Err(BackendError::Generic(format!("Unknown IR instr: {}", instr)))
            }
        }

        // 4. Invoke main
        code.push_str("\nmain()\n");

        Ok(Box::new(code.into_bytes()))
    }

    fn name(&self) -> &'static str {
        "nim"
    }
}

// Register this backend at startup
static NIM_REG: Lazy<()> = Lazy::new(|| {
    register_backend(NimBackend);
});

#[doc(hidden)]
#[allow(non_upper_case_globals)]
#[used]
static FORCE_NIM_REG: fn() = {
    fn init() {
        Lazy::force(&NIM_REG);
    }
    init
};
