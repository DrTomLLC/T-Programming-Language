// File: compiler/src/backends/c/mod.rs
//! C codegen backend for T-Lang.
//! Reads our IR debug-text and emits a standalone C program
//! that replays the instructions on two stacks (ints and strings) and prints values.

use plugin_api::{register_backend, Backend, CompiledModule, BackendError};
use once_cell::sync::Lazy;
use std::{any::Any, str};

#[derive(Debug)]
pub struct CBackend;

impl Backend<CompiledModule> for CBackend {
    type ModuleIr = Box<dyn Any + Send + Sync>;

    fn compile(&self, module: CompiledModule) -> Result<Self::ModuleIr, BackendError> {
        // 1. Decode IR text
        let ir = str::from_utf8(&module.bytecode)
            .map_err(|e| BackendError::Generic(format!("Invalid UTF-8 IR: {}", e)))?;

        // 2. Begin C source
        let mut code = String::new();
        code.push_str(r#"// Generated by T-Lang C backend
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(void) {
    long intStack[1024];
    char *strStack[1024];
    int intTop = 0, strTop = 0;
"#);

        // 3. Translate each IR instruction
        for line in ir.lines() {
            let instr = line.trim();
            if instr.is_empty() || instr == "Nop" {
                continue;
            }
            if let Some(n) = instr.strip_prefix("PushInt(").and_then(|s| s.strip_suffix(")")) {
                code.push_str(&format!("    intStack[intTop++] = {};\n", n));
            } else if let Some(raw) = instr
                .strip_prefix("PushStr(\"")
                .and_then(|s| s.strip_suffix("\")"))
            {
                let esc = raw.replace('\\', "\\\\").replace('"', "\\\"");
                code.push_str(&format!(
                    "    strStack[strTop++] = strdup(\"{}\");\n",
                    esc
                ));
            } else if instr == "CallPrint" {
                code.push_str(
                    r#"    if (strTop > 0) {
        char *s = strStack[--strTop];
        printf("%s", s);
        free(s);
    } else if (intTop > 0) {
        long v = intStack[--intTop];
        printf("%ld", v);
    }
"#,
                );
            } else {
                return Err(BackendError::Generic(format!(
                    "Unknown IR instr: {}",
                    instr
                )));
            }
        }

        // 4. Close main
        code.push_str("    return 0;\n}\n");

        Ok(Box::new(code.into_bytes()))
    }

    fn name(&self) -> &'static str {
        "c"
    }
}

// Register this backend at startup
static C_REG: Lazy<()> = Lazy::new(|| {
    register_backend(CBackend);
});

#[doc(hidden)]
#[allow(non_upper_case_globals)]
#[used]
static FORCE_C_REG: fn() = {
    fn init() {
        Lazy::force(&C_REG);
    }
    init
};
